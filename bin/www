#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('map:server');
require('dotenv').config();
const HTTPS = require('https');
const fs = require('fs');
const path = require('path');

// port set
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTPS server And Server listen
 */
try {
  let certPass = process.env.SSL_CERT;  //SSL 개인키 주소
  const option = {
    ca: fs.readFileSync( certPass + 'fullchain.pem'),
    key: fs.readFileSync(path.resolve(process.cwd(), certPass + 'privkey.pem'), 'utf8').toString(),
    cert: fs.readFileSync(path.resolve(process.cwd(), certPass + 'cert.pem'), 'utf8').toString(),
  };

  //서버 생성 및 포트 열기
  var server = HTTPS.createServer(option, app).listen(port, () =>{
    console.log(`${port}를 열었습니다.`);
  });

  server.on('error', onError);
  server.on('listening', onListening);
} catch (error) {
    console.log('[HTTPS] HTTPS 오류가 발생하였습니다. HTTPS 서버는 실행되지 않습니다.');
    console.log(error);
}



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
